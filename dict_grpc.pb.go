// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: dictGen/dict.proto

package dictGen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictServer_Add_FullMethodName   = "/dictGen.DictServer/Add"
	DictServer_Check_FullMethodName = "/dictGen.DictServer/Check"
)

// DictServerClient is the client API for DictServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictServerClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type dictServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDictServerClient(cc grpc.ClientConnInterface) DictServerClient {
	return &dictServerClient{cc}
}

func (c *dictServerClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, DictServer_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServerClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, DictServer_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictServerServer is the server API for DictServer service.
// All implementations must embed UnimplementedDictServerServer
// for forward compatibility.
type DictServerServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedDictServerServer()
}

// UnimplementedDictServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictServerServer struct{}

func (UnimplementedDictServerServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDictServerServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedDictServerServer) mustEmbedUnimplementedDictServerServer() {}
func (UnimplementedDictServerServer) testEmbeddedByValue()                    {}

// UnsafeDictServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictServerServer will
// result in compilation errors.
type UnsafeDictServerServer interface {
	mustEmbedUnimplementedDictServerServer()
}

func RegisterDictServerServer(s grpc.ServiceRegistrar, srv DictServerServer) {
	// If the following call pancis, it indicates UnimplementedDictServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictServer_ServiceDesc, srv)
}

func _DictServer_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictServer_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServerServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictServer_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServerServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictServer_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServerServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictServer_ServiceDesc is the grpc.ServiceDesc for DictServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictGen.DictServer",
	HandlerType: (*DictServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DictServer_Add_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _DictServer_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictGen/dict.proto",
}
